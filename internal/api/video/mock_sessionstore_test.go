// Code generated by mockery. DO NOT EDIT.

package video

import (
	context "context"

	session "github.com/adwski/vidi/internal/session"
	mock "github.com/stretchr/testify/mock"
)

// MockSessionStore is an autogenerated mock type for the SessionStore type
type MockSessionStore struct {
	mock.Mock
}

type MockSessionStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionStore) EXPECT() *MockSessionStore_Expecter {
	return &MockSessionStore_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockSessionStore) Get(ctx context.Context, id string) (*session.Session, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *session.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*session.Session, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *session.Session); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*session.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockSessionStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockSessionStore_Expecter) Get(ctx interface{}, id interface{}) *MockSessionStore_Get_Call {
	return &MockSessionStore_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockSessionStore_Get_Call) Run(run func(ctx context.Context, id string)) *MockSessionStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSessionStore_Get_Call) Return(_a0 *session.Session, _a1 error) *MockSessionStore_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionStore_Get_Call) RunAndReturn(run func(context.Context, string) (*session.Session, error)) *MockSessionStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, _a1
func (_m *MockSessionStore) Set(ctx context.Context, _a1 *session.Session) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *session.Session) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessionStore_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockSessionStore_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *session.Session
func (_e *MockSessionStore_Expecter) Set(ctx interface{}, _a1 interface{}) *MockSessionStore_Set_Call {
	return &MockSessionStore_Set_Call{Call: _e.mock.On("Set", ctx, _a1)}
}

func (_c *MockSessionStore_Set_Call) Run(run func(ctx context.Context, _a1 *session.Session)) *MockSessionStore_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*session.Session))
	})
	return _c
}

func (_c *MockSessionStore_Set_Call) Return(_a0 error) *MockSessionStore_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionStore_Set_Call) RunAndReturn(run func(context.Context, *session.Session) error) *MockSessionStore_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSessionStore creates a new instance of MockSessionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionStore {
	mock := &MockSessionStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
