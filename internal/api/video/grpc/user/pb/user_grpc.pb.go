// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: internal/api/video/grpc/protobuf/user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Videoapi_GetQuota_FullMethodName    = "/videoapi.videoapi/GetQuota"
	Videoapi_CreateVideo_FullMethodName = "/videoapi.videoapi/CreateVideo"
	Videoapi_GetVideo_FullMethodName    = "/videoapi.videoapi/GetVideo"
	Videoapi_GetVideos_FullMethodName   = "/videoapi.videoapi/GetVideos"
	Videoapi_DeleteVideo_FullMethodName = "/videoapi.videoapi/DeleteVideo"
)

// VideoapiClient is the client API for Videoapi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoapiClient interface {
	GetQuota(ctx context.Context, in *GetQuotaRequest, opts ...grpc.CallOption) (*QuotaResponse, error)
	CreateVideo(ctx context.Context, in *CreateVideoRequest, opts ...grpc.CallOption) (*VideoResponse, error)
	GetVideo(ctx context.Context, in *VideoRequest, opts ...grpc.CallOption) (*VideoResponse, error)
	GetVideos(ctx context.Context, in *GetVideosRequest, opts ...grpc.CallOption) (*VideosResponse, error)
	DeleteVideo(ctx context.Context, in *VideoRequest, opts ...grpc.CallOption) (*DeleteVideoResponse, error)
}

type videoapiClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoapiClient(cc grpc.ClientConnInterface) VideoapiClient {
	return &videoapiClient{cc}
}

func (c *videoapiClient) GetQuota(ctx context.Context, in *GetQuotaRequest, opts ...grpc.CallOption) (*QuotaResponse, error) {
	out := new(QuotaResponse)
	err := c.cc.Invoke(ctx, Videoapi_GetQuota_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoapiClient) CreateVideo(ctx context.Context, in *CreateVideoRequest, opts ...grpc.CallOption) (*VideoResponse, error) {
	out := new(VideoResponse)
	err := c.cc.Invoke(ctx, Videoapi_CreateVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoapiClient) GetVideo(ctx context.Context, in *VideoRequest, opts ...grpc.CallOption) (*VideoResponse, error) {
	out := new(VideoResponse)
	err := c.cc.Invoke(ctx, Videoapi_GetVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoapiClient) GetVideos(ctx context.Context, in *GetVideosRequest, opts ...grpc.CallOption) (*VideosResponse, error) {
	out := new(VideosResponse)
	err := c.cc.Invoke(ctx, Videoapi_GetVideos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoapiClient) DeleteVideo(ctx context.Context, in *VideoRequest, opts ...grpc.CallOption) (*DeleteVideoResponse, error) {
	out := new(DeleteVideoResponse)
	err := c.cc.Invoke(ctx, Videoapi_DeleteVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoapiServer is the server API for Videoapi service.
// All implementations must embed UnimplementedVideoapiServer
// for forward compatibility
type VideoapiServer interface {
	GetQuota(context.Context, *GetQuotaRequest) (*QuotaResponse, error)
	CreateVideo(context.Context, *CreateVideoRequest) (*VideoResponse, error)
	GetVideo(context.Context, *VideoRequest) (*VideoResponse, error)
	GetVideos(context.Context, *GetVideosRequest) (*VideosResponse, error)
	DeleteVideo(context.Context, *VideoRequest) (*DeleteVideoResponse, error)
	mustEmbedUnimplementedVideoapiServer()
}

// UnimplementedVideoapiServer must be embedded to have forward compatible implementations.
type UnimplementedVideoapiServer struct {
}

func (UnimplementedVideoapiServer) GetQuota(context.Context, *GetQuotaRequest) (*QuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuota not implemented")
}
func (UnimplementedVideoapiServer) CreateVideo(context.Context, *CreateVideoRequest) (*VideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVideo not implemented")
}
func (UnimplementedVideoapiServer) GetVideo(context.Context, *VideoRequest) (*VideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideo not implemented")
}
func (UnimplementedVideoapiServer) GetVideos(context.Context, *GetVideosRequest) (*VideosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideos not implemented")
}
func (UnimplementedVideoapiServer) DeleteVideo(context.Context, *VideoRequest) (*DeleteVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVideo not implemented")
}
func (UnimplementedVideoapiServer) mustEmbedUnimplementedVideoapiServer() {}

// UnsafeVideoapiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoapiServer will
// result in compilation errors.
type UnsafeVideoapiServer interface {
	mustEmbedUnimplementedVideoapiServer()
}

func RegisterVideoapiServer(s grpc.ServiceRegistrar, srv VideoapiServer) {
	s.RegisterService(&Videoapi_ServiceDesc, srv)
}

func _Videoapi_GetQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoapiServer).GetQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Videoapi_GetQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoapiServer).GetQuota(ctx, req.(*GetQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Videoapi_CreateVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoapiServer).CreateVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Videoapi_CreateVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoapiServer).CreateVideo(ctx, req.(*CreateVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Videoapi_GetVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoapiServer).GetVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Videoapi_GetVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoapiServer).GetVideo(ctx, req.(*VideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Videoapi_GetVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoapiServer).GetVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Videoapi_GetVideos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoapiServer).GetVideos(ctx, req.(*GetVideosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Videoapi_DeleteVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoapiServer).DeleteVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Videoapi_DeleteVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoapiServer).DeleteVideo(ctx, req.(*VideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Videoapi_ServiceDesc is the grpc.ServiceDesc for Videoapi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Videoapi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "videoapi.videoapi",
	HandlerType: (*VideoapiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQuota",
			Handler:    _Videoapi_GetQuota_Handler,
		},
		{
			MethodName: "CreateVideo",
			Handler:    _Videoapi_CreateVideo_Handler,
		},
		{
			MethodName: "GetVideo",
			Handler:    _Videoapi_GetVideo_Handler,
		},
		{
			MethodName: "GetVideos",
			Handler:    _Videoapi_GetVideos_Handler,
		},
		{
			MethodName: "DeleteVideo",
			Handler:    _Videoapi_DeleteVideo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/api/video/grpc/protobuf/user.proto",
}
