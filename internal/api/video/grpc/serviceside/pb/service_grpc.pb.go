// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: internal/api/video/grpc/protobuf/service.proto

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Servicesideapi_GetVideosByStatus_FullMethodName = "/videoapi.servicesideapi/GetVideosByStatus"
	Servicesideapi_UpdateVideo_FullMethodName       = "/videoapi.servicesideapi/UpdateVideo"
	Servicesideapi_UpdateVideoStatus_FullMethodName = "/videoapi.servicesideapi/UpdateVideoStatus"
	Servicesideapi_NotifyPartUpload_FullMethodName  = "/videoapi.servicesideapi/NotifyPartUpload"
)

// ServicesideapiClient is the client API for Servicesideapi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicesideapiClient interface {
	GetVideosByStatus(ctx context.Context, in *GetByStatusRequest, opts ...grpc.CallOption) (*VideoListResponse, error)
	UpdateVideo(ctx context.Context, in *UpdateVideoRequest, opts ...grpc.CallOption) (*UpdateVideoResponse, error)
	UpdateVideoStatus(ctx context.Context, in *UpdateVideoStatusRequest, opts ...grpc.CallOption) (*UpdateVideoStatusResponse, error)
	NotifyPartUpload(ctx context.Context, in *NotifyPartUploadRequest, opts ...grpc.CallOption) (*NotifyPartUploadResponse, error)
}

type servicesideapiClient struct {
	cc grpc.ClientConnInterface
}

func NewServicesideapiClient(cc grpc.ClientConnInterface) ServicesideapiClient {
	return &servicesideapiClient{cc}
}

func (c *servicesideapiClient) GetVideosByStatus(ctx context.Context, in *GetByStatusRequest, opts ...grpc.CallOption) (*VideoListResponse, error) {
	out := new(VideoListResponse)
	err := c.cc.Invoke(ctx, Servicesideapi_GetVideosByStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesideapiClient) UpdateVideo(ctx context.Context, in *UpdateVideoRequest, opts ...grpc.CallOption) (*UpdateVideoResponse, error) {
	out := new(UpdateVideoResponse)
	err := c.cc.Invoke(ctx, Servicesideapi_UpdateVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesideapiClient) UpdateVideoStatus(ctx context.Context, in *UpdateVideoStatusRequest, opts ...grpc.CallOption) (*UpdateVideoStatusResponse, error) {
	out := new(UpdateVideoStatusResponse)
	err := c.cc.Invoke(ctx, Servicesideapi_UpdateVideoStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesideapiClient) NotifyPartUpload(ctx context.Context, in *NotifyPartUploadRequest, opts ...grpc.CallOption) (*NotifyPartUploadResponse, error) {
	out := new(NotifyPartUploadResponse)
	err := c.cc.Invoke(ctx, Servicesideapi_NotifyPartUpload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicesideapiServer is the server API for Servicesideapi service.
// All implementations must embed UnimplementedServicesideapiServer
// for forward compatibility
type ServicesideapiServer interface {
	GetVideosByStatus(context.Context, *GetByStatusRequest) (*VideoListResponse, error)
	UpdateVideo(context.Context, *UpdateVideoRequest) (*UpdateVideoResponse, error)
	UpdateVideoStatus(context.Context, *UpdateVideoStatusRequest) (*UpdateVideoStatusResponse, error)
	NotifyPartUpload(context.Context, *NotifyPartUploadRequest) (*NotifyPartUploadResponse, error)
	mustEmbedUnimplementedServicesideapiServer()
}

// UnimplementedServicesideapiServer must be embedded to have forward compatible implementations.
type UnimplementedServicesideapiServer struct {
}

func (UnimplementedServicesideapiServer) GetVideosByStatus(context.Context, *GetByStatusRequest) (*VideoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideosByStatus not implemented")
}
func (UnimplementedServicesideapiServer) UpdateVideo(context.Context, *UpdateVideoRequest) (*UpdateVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVideo not implemented")
}
func (UnimplementedServicesideapiServer) UpdateVideoStatus(context.Context, *UpdateVideoStatusRequest) (*UpdateVideoStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVideoStatus not implemented")
}
func (UnimplementedServicesideapiServer) NotifyPartUpload(context.Context, *NotifyPartUploadRequest) (*NotifyPartUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyPartUpload not implemented")
}
func (UnimplementedServicesideapiServer) mustEmbedUnimplementedServicesideapiServer() {}

// UnsafeServicesideapiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicesideapiServer will
// result in compilation errors.
type UnsafeServicesideapiServer interface {
	mustEmbedUnimplementedServicesideapiServer()
}

func RegisterServicesideapiServer(s grpc.ServiceRegistrar, srv ServicesideapiServer) {
	s.RegisterService(&Servicesideapi_ServiceDesc, srv)
}

func _Servicesideapi_GetVideosByStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesideapiServer).GetVideosByStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Servicesideapi_GetVideosByStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesideapiServer).GetVideosByStatus(ctx, req.(*GetByStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Servicesideapi_UpdateVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesideapiServer).UpdateVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Servicesideapi_UpdateVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesideapiServer).UpdateVideo(ctx, req.(*UpdateVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Servicesideapi_UpdateVideoStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVideoStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesideapiServer).UpdateVideoStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Servicesideapi_UpdateVideoStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesideapiServer).UpdateVideoStatus(ctx, req.(*UpdateVideoStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Servicesideapi_NotifyPartUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyPartUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesideapiServer).NotifyPartUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Servicesideapi_NotifyPartUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesideapiServer).NotifyPartUpload(ctx, req.(*NotifyPartUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Servicesideapi_ServiceDesc is the grpc.ServiceDesc for Servicesideapi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Servicesideapi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "videoapi.servicesideapi",
	HandlerType: (*ServicesideapiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVideosByStatus",
			Handler:    _Servicesideapi_GetVideosByStatus_Handler,
		},
		{
			MethodName: "UpdateVideo",
			Handler:    _Servicesideapi_UpdateVideo_Handler,
		},
		{
			MethodName: "UpdateVideoStatus",
			Handler:    _Servicesideapi_UpdateVideoStatus_Handler,
		},
		{
			MethodName: "NotifyPartUpload",
			Handler:    _Servicesideapi_NotifyPartUpload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/api/video/grpc/protobuf/service.proto",
}
