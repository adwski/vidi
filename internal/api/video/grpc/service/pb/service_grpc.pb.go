// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: internal/api/video/grpc/protobuf/service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Videoapi_GetVideosByStatus_FullMethodName = "/videoapi.videoapi/GetVideosByStatus"
	Videoapi_UpdateVideo_FullMethodName       = "/videoapi.videoapi/UpdateVideo"
)

// VideoapiClient is the client API for Videoapi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoapiClient interface {
	GetVideosByStatus(ctx context.Context, in *GetByStatusRequest, opts ...grpc.CallOption) (*VideoListResponse, error)
	UpdateVideo(ctx context.Context, in *UpdateVideoRequest, opts ...grpc.CallOption) (*UpdateVideoResponse, error)
}

type videoapiClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoapiClient(cc grpc.ClientConnInterface) VideoapiClient {
	return &videoapiClient{cc}
}

func (c *videoapiClient) GetVideosByStatus(ctx context.Context, in *GetByStatusRequest, opts ...grpc.CallOption) (*VideoListResponse, error) {
	out := new(VideoListResponse)
	err := c.cc.Invoke(ctx, Videoapi_GetVideosByStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoapiClient) UpdateVideo(ctx context.Context, in *UpdateVideoRequest, opts ...grpc.CallOption) (*UpdateVideoResponse, error) {
	out := new(UpdateVideoResponse)
	err := c.cc.Invoke(ctx, Videoapi_UpdateVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoapiServer is the server API for Videoapi service.
// All implementations must embed UnimplementedVideoapiServer
// for forward compatibility
type VideoapiServer interface {
	GetVideosByStatus(context.Context, *GetByStatusRequest) (*VideoListResponse, error)
	UpdateVideo(context.Context, *UpdateVideoRequest) (*UpdateVideoResponse, error)
	mustEmbedUnimplementedVideoapiServer()
}

// UnimplementedVideoapiServer must be embedded to have forward compatible implementations.
type UnimplementedVideoapiServer struct {
}

func (UnimplementedVideoapiServer) GetVideosByStatus(context.Context, *GetByStatusRequest) (*VideoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideosByStatus not implemented")
}
func (UnimplementedVideoapiServer) UpdateVideo(context.Context, *UpdateVideoRequest) (*UpdateVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVideo not implemented")
}
func (UnimplementedVideoapiServer) mustEmbedUnimplementedVideoapiServer() {}

// UnsafeVideoapiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoapiServer will
// result in compilation errors.
type UnsafeVideoapiServer interface {
	mustEmbedUnimplementedVideoapiServer()
}

func RegisterVideoapiServer(s grpc.ServiceRegistrar, srv VideoapiServer) {
	s.RegisterService(&Videoapi_ServiceDesc, srv)
}

func _Videoapi_GetVideosByStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoapiServer).GetVideosByStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Videoapi_GetVideosByStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoapiServer).GetVideosByStatus(ctx, req.(*GetByStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Videoapi_UpdateVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoapiServer).UpdateVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Videoapi_UpdateVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoapiServer).UpdateVideo(ctx, req.(*UpdateVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Videoapi_ServiceDesc is the grpc.ServiceDesc for Videoapi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Videoapi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "videoapi.videoapi",
	HandlerType: (*VideoapiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVideosByStatus",
			Handler:    _Videoapi_GetVideosByStatus_Handler,
		},
		{
			MethodName: "UpdateVideo",
			Handler:    _Videoapi_UpdateVideo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/api/video/grpc/protobuf/service.proto",
}
