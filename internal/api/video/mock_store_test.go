// Code generated by mockery. DO NOT EDIT.

package video

import (
	context "context"

	model "github.com/adwski/vidi/internal/api/video/model"
	mock "github.com/stretchr/testify/mock"
)

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

type MockStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStore) EXPECT() *MockStore_Expecter {
	return &MockStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, vi
func (_m *MockStore) Create(ctx context.Context, vi *model.Video) error {
	ret := _m.Called(ctx, vi)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Video) error); ok {
		r0 = rf(ctx, vi)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - vi *model.Video
func (_e *MockStore_Expecter) Create(ctx interface{}, vi interface{}) *MockStore_Create_Call {
	return &MockStore_Create_Call{Call: _e.mock.On("Create", ctx, vi)}
}

func (_c *MockStore_Create_Call) Run(run func(ctx context.Context, vi *model.Video)) *MockStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Video))
	})
	return _c
}

func (_c *MockStore_Create_Call) Return(_a0 error) *MockStore_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_Create_Call) RunAndReturn(run func(context.Context, *model.Video) error) *MockStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id, userID
func (_m *MockStore) Delete(ctx context.Context, id string, userID string) error {
	ret := _m.Called(ctx, id, userID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - userID string
func (_e *MockStore_Expecter) Delete(ctx interface{}, id interface{}, userID interface{}) *MockStore_Delete_Call {
	return &MockStore_Delete_Call{Call: _e.mock.On("Delete", ctx, id, userID)}
}

func (_c *MockStore_Delete_Call) Run(run func(ctx context.Context, id string, userID string)) *MockStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockStore_Delete_Call) Return(_a0 error) *MockStore_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_Delete_Call) RunAndReturn(run func(context.Context, string, string) error) *MockStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id, userID
func (_m *MockStore) Get(ctx context.Context, id string, userID string) (*model.Video, error) {
	ret := _m.Called(ctx, id, userID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *model.Video
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*model.Video, error)); ok {
		return rf(ctx, id, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.Video); ok {
		r0 = rf(ctx, id, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Video)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - userID string
func (_e *MockStore_Expecter) Get(ctx interface{}, id interface{}, userID interface{}) *MockStore_Get_Call {
	return &MockStore_Get_Call{Call: _e.mock.On("Get", ctx, id, userID)}
}

func (_c *MockStore_Get_Call) Run(run func(ctx context.Context, id string, userID string)) *MockStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockStore_Get_Call) Return(_a0 *model.Video, _a1 error) *MockStore_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_Get_Call) RunAndReturn(run func(context.Context, string, string) (*model.Video, error)) *MockStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx, userID
func (_m *MockStore) GetAll(ctx context.Context, userID string) ([]*model.Video, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*model.Video
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.Video, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.Video); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Video)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockStore_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockStore_Expecter) GetAll(ctx interface{}, userID interface{}) *MockStore_GetAll_Call {
	return &MockStore_GetAll_Call{Call: _e.mock.On("GetAll", ctx, userID)}
}

func (_c *MockStore_GetAll_Call) Run(run func(ctx context.Context, userID string)) *MockStore_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStore_GetAll_Call) Return(_a0 []*model.Video, _a1 error) *MockStore_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetAll_Call) RunAndReturn(run func(context.Context, string) ([]*model.Video, error)) *MockStore_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetListByStatus provides a mock function with given fields: ctx, status
func (_m *MockStore) GetListByStatus(ctx context.Context, status model.Status) ([]*model.Video, error) {
	ret := _m.Called(ctx, status)

	if len(ret) == 0 {
		panic("no return value specified for GetListByStatus")
	}

	var r0 []*model.Video
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Status) ([]*model.Video, error)); ok {
		return rf(ctx, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Status) []*model.Video); ok {
		r0 = rf(ctx, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Video)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Status) error); ok {
		r1 = rf(ctx, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetListByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListByStatus'
type MockStore_GetListByStatus_Call struct {
	*mock.Call
}

// GetListByStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - status model.Status
func (_e *MockStore_Expecter) GetListByStatus(ctx interface{}, status interface{}) *MockStore_GetListByStatus_Call {
	return &MockStore_GetListByStatus_Call{Call: _e.mock.On("GetListByStatus", ctx, status)}
}

func (_c *MockStore_GetListByStatus_Call) Run(run func(ctx context.Context, status model.Status)) *MockStore_GetListByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Status))
	})
	return _c
}

func (_c *MockStore_GetListByStatus_Call) Return(_a0 []*model.Video, _a1 error) *MockStore_GetListByStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetListByStatus_Call) RunAndReturn(run func(context.Context, model.Status) ([]*model.Video, error)) *MockStore_GetListByStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, vi
func (_m *MockStore) Update(ctx context.Context, vi *model.Video) error {
	ret := _m.Called(ctx, vi)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Video) error); ok {
		r0 = rf(ctx, vi)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockStore_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - vi *model.Video
func (_e *MockStore_Expecter) Update(ctx interface{}, vi interface{}) *MockStore_Update_Call {
	return &MockStore_Update_Call{Call: _e.mock.On("Update", ctx, vi)}
}

func (_c *MockStore_Update_Call) Run(run func(ctx context.Context, vi *model.Video)) *MockStore_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Video))
	})
	return _c
}

func (_c *MockStore_Update_Call) Return(_a0 error) *MockStore_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_Update_Call) RunAndReturn(run func(context.Context, *model.Video) error) *MockStore_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLocation provides a mock function with given fields: ctx, vi
func (_m *MockStore) UpdateLocation(ctx context.Context, vi *model.Video) error {
	ret := _m.Called(ctx, vi)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLocation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Video) error); ok {
		r0 = rf(ctx, vi)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_UpdateLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLocation'
type MockStore_UpdateLocation_Call struct {
	*mock.Call
}

// UpdateLocation is a helper method to define mock.On call
//   - ctx context.Context
//   - vi *model.Video
func (_e *MockStore_Expecter) UpdateLocation(ctx interface{}, vi interface{}) *MockStore_UpdateLocation_Call {
	return &MockStore_UpdateLocation_Call{Call: _e.mock.On("UpdateLocation", ctx, vi)}
}

func (_c *MockStore_UpdateLocation_Call) Run(run func(ctx context.Context, vi *model.Video)) *MockStore_UpdateLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Video))
	})
	return _c
}

func (_c *MockStore_UpdateLocation_Call) Return(_a0 error) *MockStore_UpdateLocation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_UpdateLocation_Call) RunAndReturn(run func(context.Context, *model.Video) error) *MockStore_UpdateLocation_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function with given fields: ctx, vi
func (_m *MockStore) UpdateStatus(ctx context.Context, vi *model.Video) error {
	ret := _m.Called(ctx, vi)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Video) error); ok {
		r0 = rf(ctx, vi)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type MockStore_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - vi *model.Video
func (_e *MockStore_Expecter) UpdateStatus(ctx interface{}, vi interface{}) *MockStore_UpdateStatus_Call {
	return &MockStore_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, vi)}
}

func (_c *MockStore_UpdateStatus_Call) Run(run func(ctx context.Context, vi *model.Video)) *MockStore_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Video))
	})
	return _c
}

func (_c *MockStore_UpdateStatus_Call) Return(_a0 error) *MockStore_UpdateStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_UpdateStatus_Call) RunAndReturn(run func(context.Context, *model.Video) error) *MockStore_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
